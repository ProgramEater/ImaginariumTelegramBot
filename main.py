import logging
import math
import os
import pprint

import telegram.error
from telegram.ext import Application, MessageHandler, filters, CommandHandler, CallbackQueryHandler, ConversationHandler
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

from Game import Imaginarium

from dotenv import load_dotenv

# get token from .env
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)

logger = logging.getLogger(__name__)


games = []


def get_game_by_host(host):
    try:
        game: Imaginarium = list(filter(lambda x: x.host == host, games))[0]
        return game
    except IndexError:
        return ''


async def test(u, c):
    send = await c.bot.send_message(text=f'üî¥adada', chat_id=u.message.chat.id)


async def callback_solver(update, context):
    # this function manages with button callbacks
    # buttons are used for voting, choosing cards and so on

    query = update.callback_query

    # join another game
    if query.data[:4] == 'join':
        game = list(filter(lambda x: x.host.id == int(query.data.split()[1]), games))
        # if game exists
        if game:
            if query.from_user in [i.user for i in game[0].players]:
                logger.info(f'{query.from_user} already in game')
                return

            # add player to a game and get him (add player only if there's enough cards to give)
            if list(filter(lambda x: query.from_user in [i.user for i in x.players], games)):
                await context.bot.send_message(chat_id=query.from_user.id, text=f'–í—ã —É–∂–µ –∏–≥—Ä–∞–µ—Ç–µ')
                return

            if len(game[0].local_cards) < 6:
                username = f'[{query.from_user.first_name}](tg://user?id={query.from_user.id})'
                await context.bot.send_message(chat_id=game[0].main_chat_id,
                                               text=f'@{username} –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ, '
                                                    f'–∫–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–∏—Ç–µ üòî', parse_mode='Markdown')
                return
            else:
                game[0].add_player(query.from_user)
            player = list(filter(lambda x: query.from_user == x.user, game[0].players))[0]

            host_name = game[0].host.first_name + (game[0].host.last_name if game[0].host.last_name is not None else "")
            await context.bot.send_message(chat_id=game[0].main_chat_id,
                                           text=f'{player.name} '
                                                f'–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ {host_name}')
        else:
            # game doesn't exist so it has ended or it was deleted
            # (I'm not sure if we have to inform the user because he presses a button (not writing anything))
            pass
        return

    # choose a card (matching description)
    elif query.data[:6] == 'choose':
        user_id = query.from_user.id
        # find a game player in
        game = list(filter(lambda x: user_id in [i.user.id for i in x.players], games))
        # if player in game
        if game:
            game = game[0]
            player = list(filter(lambda x: x.user.id == user_id, game.players))[0]

            # if vote is not on
            if game.vote_message_id == -1:
                # return if player is a current player
                if player == game.current_player:
                    await context.bot.send_message(chat_id=query.from_user.id, text='–Ω–∞–ø–∏—à–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫ –∫–∞—Ä—Ç–µ')
                    return

                # shouldn't be any errors
                # in error then that is my fault
                resp = player.pick_card(int(query.data.split()[1]))
                if resp.get('error', ''):
                    await context.bot.send_message(chat_id=query.from_user.id, text=resp['error'])
                await context.bot.send_message(chat_id=query.from_user.id, text='–í–∞—à–∞ –∫–∞—Ä—Ç–∞ —É—á—Ç–µ–Ω–∞')
                # try to make vote line for the game
                vote_img = game.make_vote_line()

                # if not everybody has chosen card: write who hasn't
                # actually writes the last player not to pick a card
                if vote_img.get('error', ''):
                    if vote_img['error'] != 'ignore':
                        await context.bot.send_message(chat_id=game.main_chat_id, text=resp['error'])
                    return

                # if everybody has chosen card: send images for voting with keyboard to vote
                else:
                    send = await context.bot.send_photo(chat_id=game.main_chat_id,
                                                        caption=f'–≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –≤–µ–¥—É—â–µ–≥–æ '
                                                                f'*({game.current_player.name})*',
                                                        photo=open(vote_img['image'], 'rb'),
                                                        reply_markup=InlineKeyboardMarkup(
                                                            [[InlineKeyboardButton(f'{ind + 1}',
                                                                                   callback_data=f'vote {ind + 1}')
                                                              for ind in range(len(game.vote_line))]]
                                                        ),
                                                        parse_mode='Markdown')
                    game.vote_message_id = send.id
        return

    # vote for a card from vote line
    elif query.data[:4] == 'vote':
        game = list(filter(lambda x: query.from_user in [i.user for i in x.players], games))

        # return if player is not in game
        if not game:
            return
        game = game[0]

        # return if vote message is inactive
        if query.message.message_id != game.vote_message_id:
            return

        player = list(filter(lambda x: x.user.id == query.from_user.id, game.players))[0]
        # return if player is current player
        if player == game.current_player:
            return

        # if there is error - then player votes for his own card
        resp = player.vote_for_card(int(query.data.split()[1]))
        if resp.get('error', ''):
            username = f'[{query.from_user.first_name}](tg://user?id={query.from_user.id})'
            await context.bot.send_message(chat_id=query.from_user.id, text=resp['error'] + f'{username}',
                                           parse_mode='Markdown')
            return

        # try to make a conclusion of round
        # if not everybody has voted: write who hasn't
        # else: write place for every player
        resp = game.conclusion()
        if resp.get('error', ''):
            await context.bot.send_message(chat_id=game.main_chat_id, text=resp['error'])
            return
        await context.bot.send_message(chat_id=game.main_chat_id, text=resp['success'], parse_mode='Markdown')

        if resp.get('img', ''):
            await context.bot.send_photo(chat_id=game.main_chat_id,
                                         caption='–û—Ç–≤–µ—Ç—ã. (–∫—Ä–∞—Å–Ω—ã–π - –≤–µ–¥—É—â–∏–π)',
                                         photo=open(resp['img'], 'rb'))

        if resp.get('win', ''):
            winners = "\n".join([i.name for i in resp['win']])
            await context.bot.send_message(chat_id=game.main_chat_id, text=f'–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏:\n{winners}')
            await context.bot.send_message(chat_id=game.main_chat_id, text=f'–ò–≥—Ä–∞ '
                                                                           f'{game.get_player_by_user(game.host).name} '
                                                                           f'–æ–∫–æ–Ω—á–µ–Ω–∞! –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ!üôÇ')
            game.delete_used_images()
            games.pop(games.index(game))
            game.players = []
            return

        if resp.get('no cards'):
            # if game hasn't ended yet
            if game.players:
                await context.bot.send_message(chat_id=game.main_chat_id, text='–∫–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –±–µ—Ä—É –∏–∑ —Ä–∞–∑–¥–∞—á–∏...')

        await turn_start(update, context, game)


async def start(update, context):
    await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –ò–º–∞–¥–∂–∏–Ω–∞—Ä–∏—É–º.\n'
                                    '–ù–∞–ø–∏—à–∏:\n'
                                    '   /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n'
                                    '   /rules, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ –ò–º–∞–¥–∂–∏–Ω–∞—Ä–∏—É–º')


async def help_bot(update, _):
    await update.message.reply_text('–ö–æ–º–∞–Ω–¥—ã:\n'
                                    '\t/rules - –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã\n\n'
                                    '\t/host - —Å—Ç–∞—Ç—å *—Ö–æ—Å—Ç–æ–º* –Ω–æ–≤–æ–π –∏–≥—Ä—ã. (_–µ—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ >0 —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, '
                                    '—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–≥—Ä—ã –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–º (30 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)_)\n\n'
                                    '_–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á—É–∂–æ–π –∏–≥—Ä–µ (–≤ —ç—Ç–æ–º –∂–µ —á–∞—Ç–µ), –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç—å_ '
                                    '*"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"* _–ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π –∏–≥—Ä—ã._\n\n'
                                    '/set\_max\_place –Ω–æ–º–µ—Ä>0 - –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–≥—Ä—ã, '
                                    '—Ö–æ—Å—Ç–æ–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å\n\n'
                                    '\t/delete - *—É–¥–∞–ª–∏—Ç—å* –∏–≥—Ä—É, —Ö–æ—Å—Ç–æ–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å\n\n'
                                    '\t/start - *–Ω–∞—á–∞—Ç—å* –∏–≥—Ä—É, —Ö–æ—Å—Ç–æ–º –∫–æ—Ç–æ—Ä–æ–π –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å '
                                    '_(–¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è)_\n\n'
                                    '\t/quit —á—Ç–æ–±—ã *–≤—ã–π—Ç–∏* –∏–∑ –∏–≥—Ä—ã (–¥–∞–∂–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã), _–µ—Å–ª–∏ –≤—ã —Ö–æ—Å—Ç, '
                                    '—Ç–æ –ø—Ä–∞–≤–∞ —Ö–æ—Å—Ç–∞ –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –¥—Ä—É–≥–æ–º—É —á–µ–ª–æ–≤–µ–∫—É_\n\n'
                                    '/kick _"—É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ —á–µ—Ä–µ–∑ @"_ - –∫–∏–∫–Ω—É—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∏–≥—Ä—ã '
                                    '(_–Ω—É–∂–Ω–æ –ø–æ–ª–æ–≤–∏–Ω–∞ –≥–æ–ª–æ—Å–æ–≤ —á—Ç–æ–±—ã –∫–∏–∫–Ω—É—Ç—å_)\n\n'
                                    '–û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –ø–æ —Ö–æ–¥—É –∏–≥—Ä—ã.\n\n'
                                    '   _–í–∞—à–∏ –∫–∞—Ä—Ç—ã –±–æ—Ç –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –≤–∞–º –≤_ *–ª—Å.* '
                                    '_–¢—É–¥–∞ –∂–µ –Ω–∞–¥–æ –ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã '
                                    '(–∫–æ–≥–¥–∞ –≤—ã –≤–µ–¥—É—â–∏–π).\n'
                                    '   –ö–æ–≥–¥–∞ –≤—ã –Ω–µ –≤–µ–¥—É—â–∏–π, '
                                    '–±–æ—Ç —Å–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–∑ –≤–∞—à–∏—Ö –∫–∞—Ä—Ç\n'
                                    '   –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –≤ –æ–±—â–µ–º —á–∞—Ç–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ç—É–¥–∞ –∂–µ._\n\n'
                                    '_–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ: –µ—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å –ø—Ä–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏, '
                                    '–º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Å–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥—É—é, –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è –Ω–∏–∫–∞–∫ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –±–æ—Ç–∞, '
                                    '–æ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Å—ã–ª–∞–µ—Ç—Å—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã_',
                                    parse_mode='Markdown')


async def help_game(update, _):
    await update.message.reply_text('–≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ *–ò–º–∞–¥–∂–∏–Ω–∞—Ä—É–º*. –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã: '
                                    '–ö–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Ä–∞–∑–¥–∞–µ—Ç—Å—è *6 –∫–∞—Ä—Ç*, –∑–∞—Ç–µ–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ—Ä—è–¥–æ–∫ —Ö–æ–¥–æ–≤, '
                                    '–∫–∞–∂–¥—ã–π —Ö–æ–¥ —Å–º–µ–Ω—è–µ—Ç—Å—è –≤–µ–¥—É—â–∏–π (_–ø–æ –æ—á–µ—Ä–µ–¥–∏_). \n\n\t–í–µ–¥—É—â–∏–π *–≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞—Ä—Ç—É '
                                    '–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é* (_—Ç–æ, —Å —á–µ–º —É –Ω–µ–≥–æ –∞—Å—Å–æ—Ü–∏—Ä—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∏–º –∫–∞—Ä—Ç–∏–Ω–∫–∞_)'
                                    '\n\n\t–û—Å—Ç–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±–∏—Ä–∞—é—Ç –∏–∑ —Å–≤–æ–∏—Ö –∫–∞—Ä—Ç —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª–µ–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç '
                                    '–∫ –Ω–∞–∑–≤–∞–Ω–Ω–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏.\n'
                                    '   –ö–∞—Ä—Ç—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –≤—Å–µ–º, —Ç–µ–ø–µ—Ä—å –≤–∞—à–∞ –∑–∞–¥–∞—á–∞ - '
                                    '*–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ä—Ç—É –≤–µ–¥—É—â–µ–≥–æ.*\n\n'
                                    '\t–ï—Å–ª–∏ –µ–µ —É–≥–∞–¥–∞—é—Ç –≤—Å–µ, —Ç–æ –≤—Å–µ (–∫—Ä–æ–º–µ –≤–µ–¥—É—â–µ–≥–æ) –¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ 3 —à–∞–≥–∞ –≤–ø–µ—Ä–µ–¥\n\n'
                                    '\t–ï—Å–ª–∏ –Ω–∏–∫—Ç–æ, —Ç–æ –≤—Å–µ –¥–≤–∏–≥–∞—é—Ç—Å—è —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤–ø–µ—Ä–µ–¥, —Å–∫–æ–ª—å–∫–æ –∏—Ö –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–ª–∏ '
                                    '–¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ (_—Ç–æ –µ—Å—Ç—å —Ç–æ—Ç, —á—å—é –∫–∞—Ä—Ç—É –≤—ã–±—Ä–∞–ª–∏ 2 —á–µ–ª–æ–≤–µ–∫–∞, '
                                    '–∏–¥–µ—Ç –Ω–∞ 2 —à–∞–≥–∞ –≤–ø–µ—Ä–µ–¥_)\n\n'
                                    '\t–ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤ —É–≥–∞–¥–∞–ª–∞ –∫–∞—Ä—Ç—É –≤–µ–¥—É—â–µ–≥–æ, —Ç–æ –≤—Å–µ, –∫—Ç–æ —É–≥–∞–¥–∞–ª –µ–µ, '
                                    '–¥–≤–∏–≥–∞—é—Ç—Å—è –Ω–∞ 3 –≤–ø–µ—Ä–µ–¥ _(–≤–∫–ª—é—á–∞—è –≤–µ–¥—É—â–µ–≥–æ)_, —Ç–∞–∫–∂–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –¥–≤–∏–≥–∞—é—Ç—Å—è –≤–ø–µ—Ä–µ–¥ '
                                    '–Ω–∞ —Å—Ç–æ–ª—å–∫–æ —à–∞–≥–æ–≤, —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —É–≥–∞–¥–∞–ª–æ –∏—Ö –∫–∞—Ä—Ç—É _(–≤–∫–ª—é—á–∞—è –≤–µ–¥—É—â–µ–≥–æ)_\n\n'
                                    '–ò–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è '
                                    '(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30, –Ω–æ –µ–≥–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å (—Å–º. /help))\n\n'
                                    '_(–Ω–µ–±–æ–ª—å—à–æ–π —Å–æ–≤–µ—Ç: —á—Ç–æ–±—ã –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –∏–≥—Ä–∞—Ç—å –∑–∞–≥–∞–¥—ã–≤–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞—Å–ø–ª—ã–≤—á–∞—Ç—ã–µ '
                                    '–∞—Å—Å–æ—Ü–∏–∞—Ü–∏–∏, —á—Ç–æ–±—ã –≤–∞—à–∏ –∫–∞—Ä—Ç—ã —É–≥–∞–¥–∞–ª–∏ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∏–≥—Ä–æ–∫–æ–≤, —Ç–∞–∫ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ '
                                    '–±–æ–ª—å—à–µ –º–µ—Å—Ç –∏ –±–æ–ª—å—à–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è!)_\n\n'
                                    '*–í–æ—Ç –∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞! –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã.*',
                                    parse_mode='Markdown')


async def host_game(update, context):
    # check if message is sent in group chat
    if update.message['chat']['type'] == 'private':
        await update.message.reply_text('–Ω–∞–ø–∏—à–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –≤ –æ–±—â–∏–π —á–∞—Ç –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –∏–≥—Ä—É')
        return

    # check if user doesn't host another game
    username = f'[{update.message.from_user.first_name}](tg://user?id={update.message.from_user.id})'
    if get_game_by_host(update.message.from_user):
        await update.message.reply_text(f'{username} –≤—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä–∞—Ç—å', parse_mode='Markdown')
        return

    max_place = -1
    if context.args:
        try:
            max_place = int(context.args[0])
            if max_place <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text(f'{username}, —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã /host:\n '
                                            f'  /host - —Å–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–ª–µ–º 30\n'
                                            f'  /host —á–∏—Å–ª–æ —Å–æ–∑–¥–∞–µ—Ç –∏–≥—Ä—É —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–ª–µ–º',
                                            parse_mode='Markdown')
            return

    game = Imaginarium(update.message['chat']['id'], update.message.from_user)
    games.append(game)
    # add host to all players (otherwise he just hosts the game)
    game.add_player(game.host)
    player = game.get_player_by_user(game.host)

    if max_place != -1:
        game.max_place = max_place

    await context.bot.send_message(chat_id=game.main_chat_id,
                                   text=f'{player.name} –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –≤ –ò–º–∞–∂–¥–∏–Ω–∞—Ä–∏—É–º\n'
                                        f'–Ω–∞–∂–º–∏—Ç–µ "–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å!\n\n'
                                        f'üî¥* –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ù–ê–ß–ù–ò–¢–ï –î–ò–ê–õ–û–ì –° –ë–û–¢–û–ú {context.bot.name} '
                                        f'(–Ω–∞–∂–∞—Ç—å start –≤ –ª—Å —Å –Ω–∏–º), '
                                        f'—á—Ç–æ–±—ã –æ–Ω —Å–º–æ–≥ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º –≤–∞—à–∏ –∫–∞—Ä—Ç—ã*üî¥',
                                   reply_markup=
                                   InlineKeyboardMarkup([
                                       [InlineKeyboardButton('–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è',
                                                             callback_data=
                                                             f'join {update.message["from"]["id"]}')]]),
                                   parse_mode='Markdown')


async def delete_game(update, context):
    # check if user hosts a game
    game = get_game_by_host(update.message.from_user)
    if not game:
        username = f'[{update.message.from_user.first_name}](tg://user?id={update.message.from_user.id})'
        await update.message.reply_text(f'{username} –≤—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –∏–≥—Ä—É', parse_mode='Markdown')
        return

    await context.bot.send_message(chat_id=game.main_chat_id,
                                   text=f'–∏–≥—Ä–∞, —Ö–æ—Å—Ç–æ–º –∫–æ—Ç–æ—Ä–æ–π —è–≤–ª—è–ª—Å—è {game.get_player_by_user(game.host).name},'
                                        f' –±—ã–ª–∞ –∏–º —É–¥–∞–ª–µ–Ω–∞')
    games.pop(games.index(game))
    # delete used images
    game.delete_used_images()

    username = f'[{update.message.from_user.first_name}](tg://user?id={update.message.from_user.id})'
    await update.message.reply_text(f'{username} –≤–∞—à–∞ –∏–≥—Ä–∞ —É–¥–∞–ª–µ–Ω–∞', parse_mode='Markdown')


async def start_game(update, context):
    game = get_game_by_host(update.message.from_user)
    # start game if exists
    if game:
        game.start()
    await context.bot.send_message(chat_id=game.main_chat_id,
                                   text=f'{game.get_player_by_user(game.host).name} –Ω–∞—á–∞–ª –∏–≥—Ä—É. '
                                        f'\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —É–∂–µ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è')
    # start playing
    await turn_start(update, context, game)


async def turn_start(update, context, game):
    # send all players their cards
    for player in game.players:
        try:
            await context.bot.send_photo(chat_id=player.user.id, caption='–í–æ—Ç –≤–∞—à–∏ –∫–∞—Ä—Ç—ã',
                                         photo=open(game.get_player_cards_image(player), 'rb'))
        except telegram.error.Forbidden:
            # if bot can't send messages to user
            username = f'[{update.message.from_user.first_name}](tg://user?id={update.message.from_user.id})'
            await context.bot.send_message(chat_id=game.main_chat_id, text=f'{player.name} –Ω–µ –Ω–∞–ø–∏—Å–∞–ª –±–æ—Ç—É! '
                                                                           f'–ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏—Å–ª–∞—Ç—å –∫–∞—Ä—Ç—ã, '
                                                                           f'{username}'
                                                                           f'–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É üôè '
                                                                           f'({context.bot.name})',
                                           parse_mode='Markdown')
            await context.bot.send_message(chat_id=game.main_chat_id, text=f'{game.get_player_by_user(game.host).name} '
                                                                           f'([{game.host.first_name}]'
                                                                           f'(tg://user?id={game.host.id})), '
                                                                           f'–Ω–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ, '
                                                                           f'–∫–æ–≥–¥–∞ –≤—Å–µ –Ω–∞–ø–∏—à—É—Ç –±–æ—Ç—É! (/start_game)',
                                           parse_mode='Markdown')
            game.game_on = False
            return

    await context.bot.send_message(chat_id=game.main_chat_id, text=f'–í–µ–¥—É—â–∏–π - *{game.current_player.name}*',
                                   parse_mode='Markdown')

    # request an image and description from current player (using command)
    curr_pl = game.current_player
    await context.bot.send_message(text='–í–∞—à–∞ –æ—á–µ—Ä–µ–¥—å —Ö–æ–¥–∏—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é –∫ –Ω–µ–π\n'
                                        '–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: /t 2 –∂–∞—Ä–∫–∏–π –¥–µ–Ω—ë–∫\n'
                                        '–¢–∞–∫ –≤—ã –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º 2 —Å –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–µ–π "–∂–∞—Ä–∫–∏–π –¥–µ–Ω—ë–∫"',
                                   chat_id=curr_pl.user.id)


async def choose_first_card(update, context):
    # return if chat is not private
    if update.message.chat.type != 'private':
        await update.message.reply_text('–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
        return

    # return if player doesn't play a game right now
    player = update.message.from_user
    game = list(filter(lambda x: player in [j.user for j in x.players], games))
    if not game:
        await update.message.reply_text('–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ –Ω–∏ –≤ –∫–∞–∫—É—é –∏–≥—Ä—É')
        return

    # return if player is not a current player
    if game[0].current_player.user != player:
        await update.message.reply_text('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥')
        return

    game = game[0]
    player = game.get_player_by_user(player)

    if player.chosen_card:
        await update.message.reply_text('–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ä—Ç—É')
        return

    try:
        print(update.message.text.split())
        resp = player.pick_card(int(update.message.text.split()[1]))

        # inform the player if command format is wrong
        if resp.get('error', ''):
            await update.message.reply_text(resp['error'])
            return

        await update.message.reply_text('–ö–∞—Ä—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞')
        # send image description to main chat of the game
        await context.bot.send_message(chat_id=game.main_chat_id,
                                       text=f'–≤—ã–±—Ä–∞–Ω–Ω–∞—è –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è: \n'
                                            f'  *{" ".join(update.message.text.split()[2:])}*\n\n'
                                            f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É',
                                       parse_mode='Markdown')

        # send a message to each player (apart from current) asking to choose appropriate card
        # when player presses a button with number (to pick a card) we will check if all players picked card
        # if not: we send a message to main chat informing everyone about who didn't choose card yet
        # else: we shuffle cards, show them and ask everybody to vote (with same algorithm)
        for i in game.players:
            if i.user != player.user:
                await context.bot.send_message(chat_id=i.user.id,
                                               text=f'–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–æ–¥—Ö–æ–¥—è—â–µ–π –ø–æ–¥ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—é - '
                                                    f'*{" ".join(update.message.text.split()[2:])}*\n'
                                                    '_–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–¥ —Å–∞–º–æ–π –∫–∞—Ä—Ç–æ–π '
                                                    '–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–º_',
                                               reply_markup=InlineKeyboardMarkup(
                                                   [[InlineKeyboardButton(f'{ind + 1}',
                                                                          callback_data=f'choose {ind + 1}')
                                                     for ind, pl in enumerate(i.cards)]]),
                                               parse_mode='Markdown')

    except Exception:
        await update.message.reply_text('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n'
                                        '–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /t –Ω–æ–º–µ—Ä_–∫–∞—Ä—Ç—ã –∞—Å—Å–æ—Ü–∏–∞—Ü–∏—è\n'
                                        '—á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É (—Å —ç—Ç–∏–º –Ω–æ–º–µ—Ä–æ–º) –∏ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–µ–π')
        return


async def quit_game(update, context):
    game = list(filter(lambda x: update.message.from_user in [j.user for j in x.players], games))
    if not game:
        username = f'[{update.message.from_user.first_name}](tg://user?id={update.message.from_user.id})'
        await update.message.reply_text(f'{username} –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ', parse_mode='Markdown')

    game = game[0]
    player = game.get_player_by_user(update.message.from_user)

    # if player is last player
    if len(game.players) == 1:
        await update.message.reply_text(f'–ò–∑ –∏–≥—Ä—ã {player.name} –≤—ã—à–µ–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞')
        games.pop(games.index(game))
        game.delete_used_images()

    # if player is host
    elif update.message.from_user == game.host:
        game.host = game.players[game.players.index(player) - 1].user

        username = f'[{game.host.first_name}](tg://user?id={game.host.id})'
        await update.message.reply_text(f'{player.name} –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã! –û–Ω –±—ã–ª —Ö–æ—Å—Ç–æ–º. \n'
                                        f'–ù–æ–≤—ã–π —Ö–æ—Å—Ç - {username} '
                                        f'(—Ä–æ–ª—å —Ö–æ—Å—Ç–∞ –¥–∞–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å '
                                        f'–∏–≥—Ä—É –∑–∞—Ä–∞–Ω–µ–µ –∏ –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π, –Ω–µ –±–æ–π—Ç–µ—Å—å)',
                                        parse_mode='Markdown')
        game.players.pop(game.players.index(player))
        game.queue.pop(game.queue.index(player))
        game.local_cards += player.cards

        # if game hasn't started create new join button
        if not game.game_on:
            await new_join_message(update, context, game)

    # if player is not last and not host
    else:
        await update.message.reply_text(f'{player.name} –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –∏–≥—Ä—ã! –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ —É—à–ª–∏ –≤ —Ä–∞–∑–¥–∞—á—É')
        game.players.pop(game.players.index(player))
        game.queue.pop(game.queue.index(player))
        game.local_cards += player.cards


async def kick_player(update, context):
    game = list(filter(lambda x: update.message.from_user in [i.user for i in x.players], games))

    # check if player is in game
    username = f'[{update.message.from_user.first_name}](tg://user?id={update.message.from_user.id})'
    if not game:
        await update.message.reply_text(f'{username}, –≤—ã –Ω–µ –≤ –∏–≥—Ä–µ.', parse_mode='Markdown')
        return
    game = game[0]

    # get list of mentions by user
    ents = list(filter(lambda x: x.type in (telegram.MessageEntity.TEXT_MENTION, telegram.MessageEntity.MENTION),
                       update.message.entities))

    if not ents:
        await update.message.reply_text(f'{username}, —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã - "/kick —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" '
                                        f'_(—á—Ç–æ–±—ã —É–ø–æ–º—è–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—à–∏—Ç–µ @ –∏ –≤ –≤—ã–ø–∞–≤—à–µ–º '
                                        f'–º–µ–Ω—é –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)_', parse_mode='Markdown')
        return
    if ents[0].type == telegram.MessageEntity.TEXT_MENTION:
        user = ents[0].user
        if user not in [i.user for i in game.players]:
            await update.message.reply_text(f'{username}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{user.first_name}" –Ω–µ—Ç –≤ –≤–∞—à–µ–π –∏–≥—Ä–µ',
                                            parse_mode='Markdown')
            return

        player_to_kick = game.get_player_by_user(user)
    else:
        kick_username = update.message.text[ents[0].offset:ents[0].offset + ents[0].length]
        print(kick_username)
        player_to_kick = list(filter(lambda x: x.user.username == kick_username[1:], game.players))
        if not player_to_kick:
            await update.message.reply_text(f'{username}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "{kick_username}" –Ω–µ—Ç –≤ –≤–∞—à–µ–π –∏–≥—Ä–µ',
                                            parse_mode='Markdown')
            return
        player_to_kick = player_to_kick[0]

    # manage player to kick
    player_to_kick.kick_votes += 1
    votes_enough_to_kick = math.ceil((len(game.players) - 1) * 0.5)

    # if enough votes: kick player and replace host if needed, else write how much votes are left to kick
    if player_to_kick.kick_votes >= votes_enough_to_kick:
        await context.bot.send_message(chat_id=game.main_chat_id, text=f'–∏–≥—Ä–æ–∫–∞ {player_to_kick.name} '
                                                                       f'–≤—ã–ø–Ω—É–ª–∏ –∏–∑ –∏–≥—Ä—ã –ø–æ –≤–∞–∂–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ')
        # kick
        game.players.pop(game.players.index(player_to_kick))
        if player_to_kick.user == game.host:
            new_host = game.players[-1]
            game.host = new_host.user
            await context.bot.send_message(chat_id=game.main_chat_id, text=f'–∏–≥—Ä–æ–∫ {player_to_kick.name} '
                                                                           f'–±—ã–ª —Ö–æ—Å—Ç–æ–º, –Ω–æ–≤—ã–π —Ö–æ—Å—Ç - '
                                                                           f'{new_host.name}, (—Ö–æ—Å—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å '
                                                                           f'–∏–≥—Ä—É, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ)')
            # if game hasn't started create new join button
            if not game.game_on:
                await new_join_message(update, context, game)
    else:
        await update.message.reply_text(f'–í—ã–≥–Ω–∞—Ç—å –∏–≥—Ä–æ–∫–∞ "{player_to_kick.name}" –∏–∑ –∏–≥—Ä—ã '
                                        f'{game.get_player_by_user(game.host).name}: '
                                        f'{player_to_kick.kick_votes}/{votes_enough_to_kick} –≥–æ–ª–æ—Å–æ–≤',
                                        parse_mode='Markdown')


async def new_join_message(update, context, game):
    game: Imaginarium
    await context.bot.send_message(chat_id=game.main_chat_id, text=f'–ù–æ–≤—ã–π —Ö–æ—Å—Ç - '
                                                                   f'{game.get_player_by_user(game.host).name}, '
                                                                   f'–Ω–∞–∂–º–∏—Ç–µ *"–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"*, —á—Ç–æ–±—ã –∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—É',
                                   reply_markup=InlineKeyboardMarkup(
                                       [[InlineKeyboardButton('–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data=f'join {game.host.id}')]]
                                   ),
                                   parse_mode='Markdown')


async def set_max_place(update, context):
    try:
        if not context.args:
            raise ValueError

        max_place = int(context.args[0])

        if max_place <= 0:
            raise ValueError

        game = list(filter(lambda x: update.message.from_user == x.host, games))[0]
        game.max_place = max_place
    except ValueError:
        await update.message.reply_text('–ê—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏ /set_max_place - —á–∏—Å–ª–æ > 0')
        return
    except IndexError:
        await update.message.reply_text('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ö–æ—Å—Ç–æ–º –∏–≥—Ä—ã, –ª–∏–±–æ –∏–≥—Ä—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    else:
        await update.message.reply_text(f'–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–≥—Ä—ã {game.get_player_by_user(game.host).name} '
                                        f'–∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {max_place}')
        return


def main():
    # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Application.
    # –í–º–µ—Å—Ç–æ —Å–ª–æ–≤–∞ "TOKEN" –Ω–∞–¥–æ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather —Ç–æ–∫–µ–Ω
    application = Application.builder().token(BOT_TOKEN).build()

    # callback for buttons
    callback_handler = CallbackQueryHandler(callback_solver)
    application.add_handler(callback_handler)

    # test
    application.add_handler(CommandHandler('test', test))

    # commands
    application.add_handler(CommandHandler('help', help_bot))
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('rules', help_game))

    application.add_handler(CommandHandler('host', host_game))
    application.add_handler(CommandHandler('set_max_place', set_max_place))
    application.add_handler(CommandHandler('delete', delete_game))
    application.add_handler(CommandHandler('start_game', start_game))
    application.add_handler(CommandHandler('t', choose_first_card))
    application.add_handler(CommandHandler('quit', quit_game))
    application.add_handler(CommandHandler('kick', kick_player))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    application.run_polling()


if __name__ == '__main__':
    main()
